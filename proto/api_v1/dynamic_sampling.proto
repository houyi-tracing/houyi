// Copyright (c) 2021 The Houyi Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

import "houyi.proto";

package sampling;

option go_package = "github.com/houyi-tracing/houyi/idl/api_v1";

enum StrategyType {
  CONST = 0;
  PROBABILITY = 1;
  RATE_LIMITING = 2;
  ADAPTIVE = 3;
  DYNAMIC = 4;
}

message StrategyRequest {
  message Operation {
    string name = 1;
    double qps = 2;
  };
  StrategyType strategyType = 1;
  string service = 2;
  repeated Operation operations = 3;
}

message ConstSampling {
  bool sample = 1;
}

message ProbabilitySampling {
  double samplingRate = 1;
}

message RateLimitingSampling {
  int64 maxTracesPerSecond = 1;
}

message PerOperationSampling {
  string operation = 1;
  ProbabilitySampling strategy = 2;
}

message AdaptiveSampling {
  repeated PerOperationSampling strategies = 1;
}

message DynamicPerOperationSampling {
  string operation = 1;
  StrategyType strategyType = 2;
  oneof strategy {
    ConstSampling const = 4;
    ProbabilitySampling probability = 5;
    RateLimitingSampling rateLimiting = 6;
  }
}

message DynamicSampling {
  repeated DynamicPerOperationSampling strategies = 2;
}

message StrategyResponse {
  StrategyType strategyType = 1;
  oneof strategy {
    ConstSampling const = 2;
    ProbabilitySampling probability = 3;
    RateLimitingSampling rateLimiting = 4;
    AdaptiveSampling adaptive = 5;
    DynamicSampling dynamic = 6;
  }
}

service StrategyManager {
  rpc GetStrategy(StrategyRequest) returns(StrategyResponse);
}

message NullRely {}

service DynamicStrategyManager {
  rpc Promote(houyi.Operation) returns(NullRely) {};
}

message GetTagsRequest {}

message GetTagsRely {
  repeated houyi.EvaluatingTag tags = 1;
}

message UpdateTagsRequest {
  repeated houyi.EvaluatingTag tags = 1;
}

message UpdateTagsReply {}

service EvaluatorManager {
  rpc GetTags(GetTagsRequest) returns (GetTagsRely) {};
  rpc UpdateTags(UpdateTagsRequest) returns (UpdateTagsReply) {};
}
