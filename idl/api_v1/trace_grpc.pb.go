// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// TraceGraphManagerClient is the client API for TraceGraphManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TraceGraphManagerClient interface {
	Traces(ctx context.Context, in *Operation, opts ...grpc.CallOption) (*TracesReply, error)
}

type traceGraphManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewTraceGraphManagerClient(cc grpc.ClientConnInterface) TraceGraphManagerClient {
	return &traceGraphManagerClient{cc}
}

func (c *traceGraphManagerClient) Traces(ctx context.Context, in *Operation, opts ...grpc.CallOption) (*TracesReply, error) {
	out := new(TracesReply)
	err := c.cc.Invoke(ctx, "/trace.TraceGraphManager/Traces", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TraceGraphManagerServer is the server API for TraceGraphManager service.
// All implementations must embed UnimplementedTraceGraphManagerServer
// for forward compatibility
type TraceGraphManagerServer interface {
	Traces(context.Context, *Operation) (*TracesReply, error)
	mustEmbedUnimplementedTraceGraphManagerServer()
}

// UnimplementedTraceGraphManagerServer must be embedded to have forward compatible implementations.
type UnimplementedTraceGraphManagerServer struct {
}

func (UnimplementedTraceGraphManagerServer) Traces(context.Context, *Operation) (*TracesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Traces not implemented")
}
func (UnimplementedTraceGraphManagerServer) mustEmbedUnimplementedTraceGraphManagerServer() {}

// UnsafeTraceGraphManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TraceGraphManagerServer will
// result in compilation errors.
type UnsafeTraceGraphManagerServer interface {
	mustEmbedUnimplementedTraceGraphManagerServer()
}

func RegisterTraceGraphManagerServer(s grpc.ServiceRegistrar, srv TraceGraphManagerServer) {
	s.RegisterService(&_TraceGraphManager_serviceDesc, srv)
}

func _TraceGraphManager_Traces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Operation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TraceGraphManagerServer).Traces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trace.TraceGraphManager/Traces",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TraceGraphManagerServer).Traces(ctx, req.(*Operation))
	}
	return interceptor(ctx, in, info, handler)
}

var _TraceGraphManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "trace.TraceGraphManager",
	HandlerType: (*TraceGraphManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Traces",
			Handler:    _TraceGraphManager_Traces_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "trace.proto",
}
