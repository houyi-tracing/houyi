// Copyright (c) 2021 The Houyi Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.14.0
// source: dynamic_sampling.proto

package api_v1

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type StrategyType int32

const (
	StrategyType_CONST         StrategyType = 0
	StrategyType_PROBABILITY   StrategyType = 1
	StrategyType_RATE_LIMITING StrategyType = 2
	StrategyType_ADAPTIVE      StrategyType = 3
	StrategyType_DYNAMIC       StrategyType = 4
)

// Enum value maps for StrategyType.
var (
	StrategyType_name = map[int32]string{
		0: "CONST",
		1: "PROBABILITY",
		2: "RATE_LIMITING",
		3: "ADAPTIVE",
		4: "DYNAMIC",
	}
	StrategyType_value = map[string]int32{
		"CONST":         0,
		"PROBABILITY":   1,
		"RATE_LIMITING": 2,
		"ADAPTIVE":      3,
		"DYNAMIC":       4,
	}
)

func (x StrategyType) Enum() *StrategyType {
	p := new(StrategyType)
	*p = x
	return p
}

func (x StrategyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StrategyType) Descriptor() protoreflect.EnumDescriptor {
	return file_dynamic_sampling_proto_enumTypes[0].Descriptor()
}

func (StrategyType) Type() protoreflect.EnumType {
	return &file_dynamic_sampling_proto_enumTypes[0]
}

func (x StrategyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StrategyType.Descriptor instead.
func (StrategyType) EnumDescriptor() ([]byte, []int) {
	return file_dynamic_sampling_proto_rawDescGZIP(), []int{0}
}

type StrategyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StrategyType StrategyType                 `protobuf:"varint,1,opt,name=strategyType,proto3,enum=sampling.StrategyType" json:"strategyType,omitempty"`
	Service      string                       `protobuf:"bytes,2,opt,name=service,proto3" json:"service,omitempty"`
	Operations   []*StrategyRequest_Operation `protobuf:"bytes,3,rep,name=operations,proto3" json:"operations,omitempty"`
}

func (x *StrategyRequest) Reset() {
	*x = StrategyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dynamic_sampling_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StrategyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StrategyRequest) ProtoMessage() {}

func (x *StrategyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dynamic_sampling_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StrategyRequest.ProtoReflect.Descriptor instead.
func (*StrategyRequest) Descriptor() ([]byte, []int) {
	return file_dynamic_sampling_proto_rawDescGZIP(), []int{0}
}

func (x *StrategyRequest) GetStrategyType() StrategyType {
	if x != nil {
		return x.StrategyType
	}
	return StrategyType_CONST
}

func (x *StrategyRequest) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

func (x *StrategyRequest) GetOperations() []*StrategyRequest_Operation {
	if x != nil {
		return x.Operations
	}
	return nil
}

type ConstSampling struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sample bool `protobuf:"varint,1,opt,name=sample,proto3" json:"sample,omitempty"`
}

func (x *ConstSampling) Reset() {
	*x = ConstSampling{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dynamic_sampling_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConstSampling) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConstSampling) ProtoMessage() {}

func (x *ConstSampling) ProtoReflect() protoreflect.Message {
	mi := &file_dynamic_sampling_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConstSampling.ProtoReflect.Descriptor instead.
func (*ConstSampling) Descriptor() ([]byte, []int) {
	return file_dynamic_sampling_proto_rawDescGZIP(), []int{1}
}

func (x *ConstSampling) GetSample() bool {
	if x != nil {
		return x.Sample
	}
	return false
}

type ProbabilitySampling struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SamplingRate float64 `protobuf:"fixed64,1,opt,name=samplingRate,proto3" json:"samplingRate,omitempty"`
}

func (x *ProbabilitySampling) Reset() {
	*x = ProbabilitySampling{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dynamic_sampling_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProbabilitySampling) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProbabilitySampling) ProtoMessage() {}

func (x *ProbabilitySampling) ProtoReflect() protoreflect.Message {
	mi := &file_dynamic_sampling_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProbabilitySampling.ProtoReflect.Descriptor instead.
func (*ProbabilitySampling) Descriptor() ([]byte, []int) {
	return file_dynamic_sampling_proto_rawDescGZIP(), []int{2}
}

func (x *ProbabilitySampling) GetSamplingRate() float64 {
	if x != nil {
		return x.SamplingRate
	}
	return 0
}

type RateLimitingSampling struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxTracesPerSecond int64 `protobuf:"varint,1,opt,name=maxTracesPerSecond,proto3" json:"maxTracesPerSecond,omitempty"`
}

func (x *RateLimitingSampling) Reset() {
	*x = RateLimitingSampling{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dynamic_sampling_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RateLimitingSampling) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RateLimitingSampling) ProtoMessage() {}

func (x *RateLimitingSampling) ProtoReflect() protoreflect.Message {
	mi := &file_dynamic_sampling_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RateLimitingSampling.ProtoReflect.Descriptor instead.
func (*RateLimitingSampling) Descriptor() ([]byte, []int) {
	return file_dynamic_sampling_proto_rawDescGZIP(), []int{3}
}

func (x *RateLimitingSampling) GetMaxTracesPerSecond() int64 {
	if x != nil {
		return x.MaxTracesPerSecond
	}
	return 0
}

type PerOperationSampling struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operation string               `protobuf:"bytes,1,opt,name=operation,proto3" json:"operation,omitempty"`
	Strategy  *ProbabilitySampling `protobuf:"bytes,2,opt,name=strategy,proto3" json:"strategy,omitempty"`
}

func (x *PerOperationSampling) Reset() {
	*x = PerOperationSampling{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dynamic_sampling_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PerOperationSampling) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PerOperationSampling) ProtoMessage() {}

func (x *PerOperationSampling) ProtoReflect() protoreflect.Message {
	mi := &file_dynamic_sampling_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PerOperationSampling.ProtoReflect.Descriptor instead.
func (*PerOperationSampling) Descriptor() ([]byte, []int) {
	return file_dynamic_sampling_proto_rawDescGZIP(), []int{4}
}

func (x *PerOperationSampling) GetOperation() string {
	if x != nil {
		return x.Operation
	}
	return ""
}

func (x *PerOperationSampling) GetStrategy() *ProbabilitySampling {
	if x != nil {
		return x.Strategy
	}
	return nil
}

type AdaptiveSampling struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Strategies []*PerOperationSampling `protobuf:"bytes,1,rep,name=strategies,proto3" json:"strategies,omitempty"`
}

func (x *AdaptiveSampling) Reset() {
	*x = AdaptiveSampling{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dynamic_sampling_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdaptiveSampling) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdaptiveSampling) ProtoMessage() {}

func (x *AdaptiveSampling) ProtoReflect() protoreflect.Message {
	mi := &file_dynamic_sampling_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdaptiveSampling.ProtoReflect.Descriptor instead.
func (*AdaptiveSampling) Descriptor() ([]byte, []int) {
	return file_dynamic_sampling_proto_rawDescGZIP(), []int{5}
}

func (x *AdaptiveSampling) GetStrategies() []*PerOperationSampling {
	if x != nil {
		return x.Strategies
	}
	return nil
}

type DynamicPerOperationSampling struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operation    string       `protobuf:"bytes,1,opt,name=operation,proto3" json:"operation,omitempty"`
	StrategyType StrategyType `protobuf:"varint,2,opt,name=strategyType,proto3,enum=sampling.StrategyType" json:"strategyType,omitempty"`
	// Types that are assignable to Strategy:
	//	*DynamicPerOperationSampling_Const
	//	*DynamicPerOperationSampling_Probability
	//	*DynamicPerOperationSampling_RateLimiting
	Strategy isDynamicPerOperationSampling_Strategy `protobuf_oneof:"strategy"`
}

func (x *DynamicPerOperationSampling) Reset() {
	*x = DynamicPerOperationSampling{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dynamic_sampling_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DynamicPerOperationSampling) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DynamicPerOperationSampling) ProtoMessage() {}

func (x *DynamicPerOperationSampling) ProtoReflect() protoreflect.Message {
	mi := &file_dynamic_sampling_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DynamicPerOperationSampling.ProtoReflect.Descriptor instead.
func (*DynamicPerOperationSampling) Descriptor() ([]byte, []int) {
	return file_dynamic_sampling_proto_rawDescGZIP(), []int{6}
}

func (x *DynamicPerOperationSampling) GetOperation() string {
	if x != nil {
		return x.Operation
	}
	return ""
}

func (x *DynamicPerOperationSampling) GetStrategyType() StrategyType {
	if x != nil {
		return x.StrategyType
	}
	return StrategyType_CONST
}

func (m *DynamicPerOperationSampling) GetStrategy() isDynamicPerOperationSampling_Strategy {
	if m != nil {
		return m.Strategy
	}
	return nil
}

func (x *DynamicPerOperationSampling) GetConst() *ConstSampling {
	if x, ok := x.GetStrategy().(*DynamicPerOperationSampling_Const); ok {
		return x.Const
	}
	return nil
}

func (x *DynamicPerOperationSampling) GetProbability() *ProbabilitySampling {
	if x, ok := x.GetStrategy().(*DynamicPerOperationSampling_Probability); ok {
		return x.Probability
	}
	return nil
}

func (x *DynamicPerOperationSampling) GetRateLimiting() *RateLimitingSampling {
	if x, ok := x.GetStrategy().(*DynamicPerOperationSampling_RateLimiting); ok {
		return x.RateLimiting
	}
	return nil
}

type isDynamicPerOperationSampling_Strategy interface {
	isDynamicPerOperationSampling_Strategy()
}

type DynamicPerOperationSampling_Const struct {
	Const *ConstSampling `protobuf:"bytes,4,opt,name=const,proto3,oneof"`
}

type DynamicPerOperationSampling_Probability struct {
	Probability *ProbabilitySampling `protobuf:"bytes,5,opt,name=probability,proto3,oneof"`
}

type DynamicPerOperationSampling_RateLimiting struct {
	RateLimiting *RateLimitingSampling `protobuf:"bytes,6,opt,name=rateLimiting,proto3,oneof"`
}

func (*DynamicPerOperationSampling_Const) isDynamicPerOperationSampling_Strategy() {}

func (*DynamicPerOperationSampling_Probability) isDynamicPerOperationSampling_Strategy() {}

func (*DynamicPerOperationSampling_RateLimiting) isDynamicPerOperationSampling_Strategy() {}

type DynamicSampling struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Strategies []*DynamicPerOperationSampling `protobuf:"bytes,2,rep,name=strategies,proto3" json:"strategies,omitempty"`
}

func (x *DynamicSampling) Reset() {
	*x = DynamicSampling{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dynamic_sampling_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DynamicSampling) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DynamicSampling) ProtoMessage() {}

func (x *DynamicSampling) ProtoReflect() protoreflect.Message {
	mi := &file_dynamic_sampling_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DynamicSampling.ProtoReflect.Descriptor instead.
func (*DynamicSampling) Descriptor() ([]byte, []int) {
	return file_dynamic_sampling_proto_rawDescGZIP(), []int{7}
}

func (x *DynamicSampling) GetStrategies() []*DynamicPerOperationSampling {
	if x != nil {
		return x.Strategies
	}
	return nil
}

type StrategyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StrategyType StrategyType `protobuf:"varint,1,opt,name=strategyType,proto3,enum=sampling.StrategyType" json:"strategyType,omitempty"`
	// Types that are assignable to Strategy:
	//	*StrategyResponse_Const
	//	*StrategyResponse_Probability
	//	*StrategyResponse_RateLimiting
	//	*StrategyResponse_Adaptive
	//	*StrategyResponse_Dynamic
	Strategy isStrategyResponse_Strategy `protobuf_oneof:"strategy"`
}

func (x *StrategyResponse) Reset() {
	*x = StrategyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dynamic_sampling_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StrategyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StrategyResponse) ProtoMessage() {}

func (x *StrategyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dynamic_sampling_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StrategyResponse.ProtoReflect.Descriptor instead.
func (*StrategyResponse) Descriptor() ([]byte, []int) {
	return file_dynamic_sampling_proto_rawDescGZIP(), []int{8}
}

func (x *StrategyResponse) GetStrategyType() StrategyType {
	if x != nil {
		return x.StrategyType
	}
	return StrategyType_CONST
}

func (m *StrategyResponse) GetStrategy() isStrategyResponse_Strategy {
	if m != nil {
		return m.Strategy
	}
	return nil
}

func (x *StrategyResponse) GetConst() *ConstSampling {
	if x, ok := x.GetStrategy().(*StrategyResponse_Const); ok {
		return x.Const
	}
	return nil
}

func (x *StrategyResponse) GetProbability() *ProbabilitySampling {
	if x, ok := x.GetStrategy().(*StrategyResponse_Probability); ok {
		return x.Probability
	}
	return nil
}

func (x *StrategyResponse) GetRateLimiting() *RateLimitingSampling {
	if x, ok := x.GetStrategy().(*StrategyResponse_RateLimiting); ok {
		return x.RateLimiting
	}
	return nil
}

func (x *StrategyResponse) GetAdaptive() *AdaptiveSampling {
	if x, ok := x.GetStrategy().(*StrategyResponse_Adaptive); ok {
		return x.Adaptive
	}
	return nil
}

func (x *StrategyResponse) GetDynamic() *DynamicSampling {
	if x, ok := x.GetStrategy().(*StrategyResponse_Dynamic); ok {
		return x.Dynamic
	}
	return nil
}

type isStrategyResponse_Strategy interface {
	isStrategyResponse_Strategy()
}

type StrategyResponse_Const struct {
	Const *ConstSampling `protobuf:"bytes,2,opt,name=const,proto3,oneof"`
}

type StrategyResponse_Probability struct {
	Probability *ProbabilitySampling `protobuf:"bytes,3,opt,name=probability,proto3,oneof"`
}

type StrategyResponse_RateLimiting struct {
	RateLimiting *RateLimitingSampling `protobuf:"bytes,4,opt,name=rateLimiting,proto3,oneof"`
}

type StrategyResponse_Adaptive struct {
	Adaptive *AdaptiveSampling `protobuf:"bytes,5,opt,name=adaptive,proto3,oneof"`
}

type StrategyResponse_Dynamic struct {
	Dynamic *DynamicSampling `protobuf:"bytes,6,opt,name=dynamic,proto3,oneof"`
}

func (*StrategyResponse_Const) isStrategyResponse_Strategy() {}

func (*StrategyResponse_Probability) isStrategyResponse_Strategy() {}

func (*StrategyResponse_RateLimiting) isStrategyResponse_Strategy() {}

func (*StrategyResponse_Adaptive) isStrategyResponse_Strategy() {}

func (*StrategyResponse_Dynamic) isStrategyResponse_Strategy() {}

type NullRely struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NullRely) Reset() {
	*x = NullRely{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dynamic_sampling_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NullRely) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NullRely) ProtoMessage() {}

func (x *NullRely) ProtoReflect() protoreflect.Message {
	mi := &file_dynamic_sampling_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NullRely.ProtoReflect.Descriptor instead.
func (*NullRely) Descriptor() ([]byte, []int) {
	return file_dynamic_sampling_proto_rawDescGZIP(), []int{9}
}

type GetTagsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetTagsRequest) Reset() {
	*x = GetTagsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dynamic_sampling_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTagsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTagsRequest) ProtoMessage() {}

func (x *GetTagsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dynamic_sampling_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTagsRequest.ProtoReflect.Descriptor instead.
func (*GetTagsRequest) Descriptor() ([]byte, []int) {
	return file_dynamic_sampling_proto_rawDescGZIP(), []int{10}
}

type GetTagsRely struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tags []*EvaluatingTag `protobuf:"bytes,1,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *GetTagsRely) Reset() {
	*x = GetTagsRely{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dynamic_sampling_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTagsRely) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTagsRely) ProtoMessage() {}

func (x *GetTagsRely) ProtoReflect() protoreflect.Message {
	mi := &file_dynamic_sampling_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTagsRely.ProtoReflect.Descriptor instead.
func (*GetTagsRely) Descriptor() ([]byte, []int) {
	return file_dynamic_sampling_proto_rawDescGZIP(), []int{11}
}

func (x *GetTagsRely) GetTags() []*EvaluatingTag {
	if x != nil {
		return x.Tags
	}
	return nil
}

type UpdateTagsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tags []*EvaluatingTag `protobuf:"bytes,1,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *UpdateTagsRequest) Reset() {
	*x = UpdateTagsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dynamic_sampling_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTagsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTagsRequest) ProtoMessage() {}

func (x *UpdateTagsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dynamic_sampling_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTagsRequest.ProtoReflect.Descriptor instead.
func (*UpdateTagsRequest) Descriptor() ([]byte, []int) {
	return file_dynamic_sampling_proto_rawDescGZIP(), []int{12}
}

func (x *UpdateTagsRequest) GetTags() []*EvaluatingTag {
	if x != nil {
		return x.Tags
	}
	return nil
}

type UpdateTagsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateTagsReply) Reset() {
	*x = UpdateTagsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dynamic_sampling_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTagsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTagsReply) ProtoMessage() {}

func (x *UpdateTagsReply) ProtoReflect() protoreflect.Message {
	mi := &file_dynamic_sampling_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTagsReply.ProtoReflect.Descriptor instead.
func (*UpdateTagsReply) Descriptor() ([]byte, []int) {
	return file_dynamic_sampling_proto_rawDescGZIP(), []int{13}
}

type StrategyRequest_Operation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Qps  float64 `protobuf:"fixed64,2,opt,name=qps,proto3" json:"qps,omitempty"`
}

func (x *StrategyRequest_Operation) Reset() {
	*x = StrategyRequest_Operation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dynamic_sampling_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StrategyRequest_Operation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StrategyRequest_Operation) ProtoMessage() {}

func (x *StrategyRequest_Operation) ProtoReflect() protoreflect.Message {
	mi := &file_dynamic_sampling_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StrategyRequest_Operation.ProtoReflect.Descriptor instead.
func (*StrategyRequest_Operation) Descriptor() ([]byte, []int) {
	return file_dynamic_sampling_proto_rawDescGZIP(), []int{0, 0}
}

func (x *StrategyRequest_Operation) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StrategyRequest_Operation) GetQps() float64 {
	if x != nil {
		return x.Qps
	}
	return 0
}

var File_dynamic_sampling_proto protoreflect.FileDescriptor

var file_dynamic_sampling_proto_rawDesc = []byte{
	0x0a, 0x16, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69,
	0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69,
	0x6e, 0x67, 0x1a, 0x0b, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xdf, 0x01, 0x0a, 0x0f, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x73, 0x61, 0x6d, 0x70,
	0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0c, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x43, 0x0a, 0x0a, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x31,
	0x0a, 0x09, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x71, 0x70, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x71, 0x70,
	0x73, 0x22, 0x27, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x69,
	0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x22, 0x39, 0x0a, 0x13, 0x50, 0x72,
	0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e,
	0x67, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x61, 0x74,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e,
	0x67, 0x52, 0x61, 0x74, 0x65, 0x22, 0x46, 0x0a, 0x14, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x2e, 0x0a,
	0x12, 0x6d, 0x61, 0x78, 0x54, 0x72, 0x61, 0x63, 0x65, 0x73, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x6d, 0x61, 0x78, 0x54, 0x72,
	0x61, 0x63, 0x65, 0x73, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x22, 0x6f, 0x0a,
	0x14, 0x50, 0x65, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x61, 0x6d,
	0x70, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67,
	0x2e, 0x50, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x61, 0x6d, 0x70,
	0x6c, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x22, 0x52,
	0x0a, 0x10, 0x41, 0x64, 0x61, 0x70, 0x74, 0x69, 0x76, 0x65, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x69,
	0x6e, 0x67, 0x12, 0x3e, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x69, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e,
	0x67, 0x2e, 0x50, 0x65, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x61,
	0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x69,
	0x65, 0x73, 0x22, 0xbd, 0x02, 0x0a, 0x1b, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x50, 0x65,
	0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x69,
	0x6e, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x3a, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e,
	0x67, 0x2e, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2f, 0x0a, 0x05,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x61,
	0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x53, 0x61, 0x6d, 0x70,
	0x6c, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x05, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x12, 0x41, 0x0a,
	0x0b, 0x70, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x72,
	0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e,
	0x67, 0x48, 0x00, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x12, 0x44, 0x0a, 0x0c, 0x72, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x6e, 0x67,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e,
	0x67, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x61,
	0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x0c, 0x72, 0x61, 0x74, 0x65, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x0a, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x67, 0x79, 0x22, 0x58, 0x0a, 0x0f, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x53, 0x61, 0x6d,
	0x70, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x45, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67,
	0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x61, 0x6d, 0x70,
	0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x50, 0x65, 0x72, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67,
	0x52, 0x0a, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x69, 0x65, 0x73, 0x22, 0x85, 0x03, 0x0a,
	0x10, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x3a, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69,
	0x6e, 0x67, 0x2e, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0c, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2f, 0x0a,
	0x05, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73,
	0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x53, 0x61, 0x6d,
	0x70, 0x6c, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x05, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x12, 0x41,
	0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x50,
	0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x69,
	0x6e, 0x67, 0x48, 0x00, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x12, 0x44, 0x0a, 0x0c, 0x72, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x6e,
	0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69,
	0x6e, 0x67, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x53,
	0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x0c, 0x72, 0x61, 0x74, 0x65, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x38, 0x0a, 0x08, 0x61, 0x64, 0x61, 0x70, 0x74,
	0x69, 0x76, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x61, 0x6d, 0x70,
	0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x41, 0x64, 0x61, 0x70, 0x74, 0x69, 0x76, 0x65, 0x53, 0x61, 0x6d,
	0x70, 0x6c, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x08, 0x61, 0x64, 0x61, 0x70, 0x74, 0x69, 0x76,
	0x65, 0x12, 0x35, 0x0a, 0x07, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x44, 0x79,
	0x6e, 0x61, 0x6d, 0x69, 0x63, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52,
	0x07, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x42, 0x0a, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x67, 0x79, 0x22, 0x0a, 0x0a, 0x08, 0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x6c, 0x79,
	0x22, 0x10, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x37, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x54, 0x61, 0x67, 0x73, 0x52, 0x65, 0x6c,
	0x79, 0x12, 0x28, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x2e, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x54, 0x61, 0x67, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x22, 0x3d, 0x0a, 0x11, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x61, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x28, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x2e, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x54, 0x61, 0x67, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x22, 0x11, 0x0a, 0x0f, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x61, 0x67, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2a, 0x58, 0x0a,
	0x0c, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a,
	0x05, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x52, 0x4f, 0x42,
	0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x41, 0x54,
	0x45, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08,
	0x41, 0x44, 0x41, 0x50, 0x54, 0x49, 0x56, 0x45, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x59,
	0x4e, 0x41, 0x4d, 0x49, 0x43, 0x10, 0x04, 0x32, 0x57, 0x0a, 0x0f, 0x53, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x79, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x0b, 0x47, 0x65,
	0x74, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x19, 0x2e, 0x73, 0x61, 0x6d, 0x70,
	0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x2e,
	0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x32, 0x4b, 0x0a, 0x16, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x53, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x79, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x07, 0x50, 0x72,
	0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x12, 0x10, 0x2e, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x2e, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x12, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69,
	0x6e, 0x67, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x6c, 0x79, 0x22, 0x00, 0x32, 0x98, 0x01,
	0x0a, 0x10, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x12, 0x3c, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x54, 0x61, 0x67, 0x73, 0x12, 0x18, 0x2e,
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x67, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69,
	0x6e, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x67, 0x73, 0x52, 0x65, 0x6c, 0x79, 0x22, 0x00,
	0x12, 0x46, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x61, 0x67, 0x73, 0x12, 0x1b,
	0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x61, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x73, 0x61,
	0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x61, 0x67,
	0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x42, 0x2b, 0x5a, 0x29, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x2d, 0x74, 0x72, 0x61,
	0x63, 0x69, 0x6e, 0x67, 0x2f, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x2f, 0x69, 0x64, 0x6c, 0x2f, 0x61,
	0x70, 0x69, 0x5f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_dynamic_sampling_proto_rawDescOnce sync.Once
	file_dynamic_sampling_proto_rawDescData = file_dynamic_sampling_proto_rawDesc
)

func file_dynamic_sampling_proto_rawDescGZIP() []byte {
	file_dynamic_sampling_proto_rawDescOnce.Do(func() {
		file_dynamic_sampling_proto_rawDescData = protoimpl.X.CompressGZIP(file_dynamic_sampling_proto_rawDescData)
	})
	return file_dynamic_sampling_proto_rawDescData
}

var file_dynamic_sampling_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_dynamic_sampling_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_dynamic_sampling_proto_goTypes = []interface{}{
	(StrategyType)(0),                   // 0: sampling.StrategyType
	(*StrategyRequest)(nil),             // 1: sampling.StrategyRequest
	(*ConstSampling)(nil),               // 2: sampling.ConstSampling
	(*ProbabilitySampling)(nil),         // 3: sampling.ProbabilitySampling
	(*RateLimitingSampling)(nil),        // 4: sampling.RateLimitingSampling
	(*PerOperationSampling)(nil),        // 5: sampling.PerOperationSampling
	(*AdaptiveSampling)(nil),            // 6: sampling.AdaptiveSampling
	(*DynamicPerOperationSampling)(nil), // 7: sampling.DynamicPerOperationSampling
	(*DynamicSampling)(nil),             // 8: sampling.DynamicSampling
	(*StrategyResponse)(nil),            // 9: sampling.StrategyResponse
	(*NullRely)(nil),                    // 10: sampling.NullRely
	(*GetTagsRequest)(nil),              // 11: sampling.GetTagsRequest
	(*GetTagsRely)(nil),                 // 12: sampling.GetTagsRely
	(*UpdateTagsRequest)(nil),           // 13: sampling.UpdateTagsRequest
	(*UpdateTagsReply)(nil),             // 14: sampling.UpdateTagsReply
	(*StrategyRequest_Operation)(nil),   // 15: sampling.StrategyRequest.Operation
	(*EvaluatingTag)(nil),               // 16: houyi.EvaluatingTag
	(*Operation)(nil),                   // 17: houyi.Operation
}
var file_dynamic_sampling_proto_depIdxs = []int32{
	0,  // 0: sampling.StrategyRequest.strategyType:type_name -> sampling.StrategyType
	15, // 1: sampling.StrategyRequest.operations:type_name -> sampling.StrategyRequest.Operation
	3,  // 2: sampling.PerOperationSampling.strategy:type_name -> sampling.ProbabilitySampling
	5,  // 3: sampling.AdaptiveSampling.strategies:type_name -> sampling.PerOperationSampling
	0,  // 4: sampling.DynamicPerOperationSampling.strategyType:type_name -> sampling.StrategyType
	2,  // 5: sampling.DynamicPerOperationSampling.const:type_name -> sampling.ConstSampling
	3,  // 6: sampling.DynamicPerOperationSampling.probability:type_name -> sampling.ProbabilitySampling
	4,  // 7: sampling.DynamicPerOperationSampling.rateLimiting:type_name -> sampling.RateLimitingSampling
	7,  // 8: sampling.DynamicSampling.strategies:type_name -> sampling.DynamicPerOperationSampling
	0,  // 9: sampling.StrategyResponse.strategyType:type_name -> sampling.StrategyType
	2,  // 10: sampling.StrategyResponse.const:type_name -> sampling.ConstSampling
	3,  // 11: sampling.StrategyResponse.probability:type_name -> sampling.ProbabilitySampling
	4,  // 12: sampling.StrategyResponse.rateLimiting:type_name -> sampling.RateLimitingSampling
	6,  // 13: sampling.StrategyResponse.adaptive:type_name -> sampling.AdaptiveSampling
	8,  // 14: sampling.StrategyResponse.dynamic:type_name -> sampling.DynamicSampling
	16, // 15: sampling.GetTagsRely.tags:type_name -> houyi.EvaluatingTag
	16, // 16: sampling.UpdateTagsRequest.tags:type_name -> houyi.EvaluatingTag
	1,  // 17: sampling.StrategyManager.GetStrategy:input_type -> sampling.StrategyRequest
	17, // 18: sampling.DynamicStrategyManager.Promote:input_type -> houyi.Operation
	11, // 19: sampling.EvaluatorManager.GetTags:input_type -> sampling.GetTagsRequest
	13, // 20: sampling.EvaluatorManager.UpdateTags:input_type -> sampling.UpdateTagsRequest
	9,  // 21: sampling.StrategyManager.GetStrategy:output_type -> sampling.StrategyResponse
	10, // 22: sampling.DynamicStrategyManager.Promote:output_type -> sampling.NullRely
	12, // 23: sampling.EvaluatorManager.GetTags:output_type -> sampling.GetTagsRely
	14, // 24: sampling.EvaluatorManager.UpdateTags:output_type -> sampling.UpdateTagsReply
	21, // [21:25] is the sub-list for method output_type
	17, // [17:21] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_dynamic_sampling_proto_init() }
func file_dynamic_sampling_proto_init() {
	if File_dynamic_sampling_proto != nil {
		return
	}
	file_houyi_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_dynamic_sampling_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StrategyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dynamic_sampling_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConstSampling); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dynamic_sampling_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProbabilitySampling); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dynamic_sampling_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RateLimitingSampling); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dynamic_sampling_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PerOperationSampling); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dynamic_sampling_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdaptiveSampling); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dynamic_sampling_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DynamicPerOperationSampling); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dynamic_sampling_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DynamicSampling); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dynamic_sampling_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StrategyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dynamic_sampling_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NullRely); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dynamic_sampling_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTagsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dynamic_sampling_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTagsRely); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dynamic_sampling_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTagsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dynamic_sampling_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTagsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dynamic_sampling_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StrategyRequest_Operation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_dynamic_sampling_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*DynamicPerOperationSampling_Const)(nil),
		(*DynamicPerOperationSampling_Probability)(nil),
		(*DynamicPerOperationSampling_RateLimiting)(nil),
	}
	file_dynamic_sampling_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*StrategyResponse_Const)(nil),
		(*StrategyResponse_Probability)(nil),
		(*StrategyResponse_RateLimiting)(nil),
		(*StrategyResponse_Adaptive)(nil),
		(*StrategyResponse_Dynamic)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_dynamic_sampling_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   3,
		},
		GoTypes:           file_dynamic_sampling_proto_goTypes,
		DependencyIndexes: file_dynamic_sampling_proto_depIdxs,
		EnumInfos:         file_dynamic_sampling_proto_enumTypes,
		MessageInfos:      file_dynamic_sampling_proto_msgTypes,
	}.Build()
	File_dynamic_sampling_proto = out.File
	file_dynamic_sampling_proto_rawDesc = nil
	file_dynamic_sampling_proto_goTypes = nil
	file_dynamic_sampling_proto_depIdxs = nil
}
