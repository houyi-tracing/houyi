// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// StrategyManagerClient is the client API for strategyManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StrategyManagerClient interface {
	GetStrategies(ctx context.Context, in *StrategyRequest, opts ...grpc.CallOption) (*StrategiesResponse, error)
	Promote(ctx context.Context, in *Operation, opts ...grpc.CallOption) (*NullRely, error)
}

type strategyManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewStrategyManagerClient(cc grpc.ClientConnInterface) StrategyManagerClient {
	return &strategyManagerClient{cc}
}

func (c *strategyManagerClient) GetStrategies(ctx context.Context, in *StrategyRequest, opts ...grpc.CallOption) (*StrategiesResponse, error) {
	out := new(StrategiesResponse)
	err := c.cc.Invoke(ctx, "/sampling.strategyManager/GetStrategies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strategyManagerClient) Promote(ctx context.Context, in *Operation, opts ...grpc.CallOption) (*NullRely, error) {
	out := new(NullRely)
	err := c.cc.Invoke(ctx, "/sampling.strategyManager/Promote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StrategyManagerServer is the server API for strategyManager service.
// All implementations must embed UnimplementedStrategyManagerServer
// for forward compatibility
type StrategyManagerServer interface {
	GetStrategies(context.Context, *StrategyRequest) (*StrategiesResponse, error)
	Promote(context.Context, *Operation) (*NullRely, error)
	mustEmbedUnimplementedStrategyManagerServer()
}

// UnimplementedStrategyManagerServer must be embedded to have forward compatible implementations.
type UnimplementedStrategyManagerServer struct {
}

func (UnimplementedStrategyManagerServer) GetStrategies(context.Context, *StrategyRequest) (*StrategiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStrategies not implemented")
}
func (UnimplementedStrategyManagerServer) Promote(context.Context, *Operation) (*NullRely, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Promote not implemented")
}
func (UnimplementedStrategyManagerServer) mustEmbedUnimplementedStrategyManagerServer() {}

// UnsafeStrategyManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StrategyManagerServer will
// result in compilation errors.
type UnsafeStrategyManagerServer interface {
	mustEmbedUnimplementedStrategyManagerServer()
}

func RegisterStrategyManagerServer(s grpc.ServiceRegistrar, srv StrategyManagerServer) {
	s.RegisterService(&_StrategyManager_serviceDesc, srv)
}

func _StrategyManager_GetStrategies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StrategyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrategyManagerServer).GetStrategies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sampling.strategyManager/GetStrategies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrategyManagerServer).GetStrategies(ctx, req.(*StrategyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StrategyManager_Promote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Operation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrategyManagerServer).Promote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sampling.strategyManager/Promote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrategyManagerServer).Promote(ctx, req.(*Operation))
	}
	return interceptor(ctx, in, info, handler)
}

var _StrategyManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sampling.strategyManager",
	HandlerType: (*StrategyManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStrategies",
			Handler:    _StrategyManager_GetStrategies_Handler,
		},
		{
			MethodName: "Promote",
			Handler:    _StrategyManager_Promote_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dynamic_sampling.proto",
}

// EvaluatorManagerClient is the client API for EvaluatorManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EvaluatorManagerClient interface {
	UpdateTags(ctx context.Context, in *UpdateTagsRequest, opts ...grpc.CallOption) (*NullRely, error)
}

type evaluatorManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewEvaluatorManagerClient(cc grpc.ClientConnInterface) EvaluatorManagerClient {
	return &evaluatorManagerClient{cc}
}

func (c *evaluatorManagerClient) UpdateTags(ctx context.Context, in *UpdateTagsRequest, opts ...grpc.CallOption) (*NullRely, error) {
	out := new(NullRely)
	err := c.cc.Invoke(ctx, "/sampling.EvaluatorManager/UpdateTags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EvaluatorManagerServer is the server API for EvaluatorManager service.
// All implementations must embed UnimplementedEvaluatorManagerServer
// for forward compatibility
type EvaluatorManagerServer interface {
	UpdateTags(context.Context, *UpdateTagsRequest) (*NullRely, error)
	mustEmbedUnimplementedEvaluatorManagerServer()
}

// UnimplementedEvaluatorManagerServer must be embedded to have forward compatible implementations.
type UnimplementedEvaluatorManagerServer struct {
}

func (UnimplementedEvaluatorManagerServer) UpdateTags(context.Context, *UpdateTagsRequest) (*NullRely, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTags not implemented")
}
func (UnimplementedEvaluatorManagerServer) mustEmbedUnimplementedEvaluatorManagerServer() {}

// UnsafeEvaluatorManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EvaluatorManagerServer will
// result in compilation errors.
type UnsafeEvaluatorManagerServer interface {
	mustEmbedUnimplementedEvaluatorManagerServer()
}

func RegisterEvaluatorManagerServer(s grpc.ServiceRegistrar, srv EvaluatorManagerServer) {
	s.RegisterService(&_EvaluatorManager_serviceDesc, srv)
}

func _EvaluatorManager_UpdateTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EvaluatorManagerServer).UpdateTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sampling.EvaluatorManager/UpdateTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EvaluatorManagerServer).UpdateTags(ctx, req.(*UpdateTagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _EvaluatorManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sampling.EvaluatorManager",
	HandlerType: (*EvaluatorManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateTags",
			Handler:    _EvaluatorManager_UpdateTags_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dynamic_sampling.proto",
}
